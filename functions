#!/usr/bin/env bash

mkd () { mkdir -p "$@" && cd "$_" || exit; }

git-stash-all() {
	[ "$(git status --short | wc -l)" -eq 0 ] && return 0
	git add -A
	git stash
}

git-hack () {
	local parent branch_name stashed_changes

	branch_name="$1"
	[ -z "${branch_name}" ] && return 1

	gum spin --spinner points --title "Fetching" -- git fetch --prune --tags

	parent=$(git branch | cut -c 3- | grep -E 'main|master' | head -n 1)
	! gum confirm "Hack from ${parent}?" && \
		echo 'Select parent branch' && \
		parent=$(git-branch-choose)
	[ -z "${parent}" ] && return 1

	git-stash-all && stashed_changes="true"
	git checkout "${parent}"
	git pull
	git branch "${branch_name}" "${parent}"
	git checkout "${branch_name}"
	[ "${stashed_changes}" = "true" ] && git stash pop
}

git-prune-branches () {
	local branches
	gum spin --spinner points --title "Fetching..." -- git fetch --prune --tags
	echo 'Branches'
	git --no-pager branch -vv
	echo ''
	branches=$(git branch -vv | grep gone | awk '{print $1}')
	if [[ "${branches}" ]]; then
		echo 'Dangling branches found'
		echo "${branches}" | gum choose --no-limit | xargs git branch -D
	else
		echo 'No dangling branches found'
	fi
}

batgrep () {
	rg --line-number --no-heading --color=always --smart-case "$@" |
		fzf -d ':' -n 2.. --ansi --no-sort \
			--preview-window="up,60%,border-bottom,+{2}+3/3" \
			--preview 'bat --style=numbers --color=always --highlight-line {2} {1}';
}

# Required for broot
br() {
    local cmd cmd_file code
    cmd_file=$(mktemp)
    if broot --outcmd "$cmd_file" "$@"; then
        cmd=$(<"$cmd_file")
        rm -f "$cmd_file"
        eval "$cmd"
    else
        code=$?
        rm -f "$cmd_file"
        return "$code"
    fi
}

# base64 encode / decode
encode-base64 () { echo "$1" | base64; }
decode-base64 () { echo "$1" | base64 --decode; }

# Create a data URL from a file
dataurl () {
	local mimeType;
	mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# IP addresses
localip () { ifconfig en0 | grep inet | awk '$1=="inet" {print $2}'; }
publicip-v4 () { dig -4 TXT +short o-o.myaddr.l.google.com @ns1.google.com; }
publicip-v6 () { dig -6 TXT +short o-o.myaddr.l.google.com @ns1.google.com; }
publicip () {
	echo "Public IPv4: $( publicip-v4 )";
	echo "Public IPv6: $( publicip-v6 )";
}

qr () {
	local input="$*"
	[ -z "$input" ] && local input="@/dev/stdin"
	curl -d "$input" https://qrcode.show
}

qr-svg () {
	local input="$*"
	[ -z "$input" ] && local input="@/dev/stdin"
	curl -d "${input}" https://qrcode.show -H "Accept: image/svg+xml"
}

convert-to-gif () {
	INPUT="$1"
	FRAMERATE=$(gum input --prompt "Frame rate: " --placeholder "Frame Rate" --value "10")
	WIDTH=$(gum input --prompt "Width: " --placeholder "Width" --value "1200")
	MAXCOLORS=$(gum input --prompt "Max Colors: " --placeholder "Max Colors" --value "256")

	BASENAME=$(basename "$INPUT")
	BASENAME="${BASENAME%%.*}"

	gum spin --spinner points --title "Converting to GIF" -- \
		ffmpeg -i "$INPUT" -vf "fps=$FRAMERATE,scale=$WIDTH:-1:flags=lanczos,split[s0][s1];[s0]palettegen=max_colors=${MAXCOLORS}[p];[s1][p]paletteuse" "$BASENAME.gif"
}

aws-info () {
	aws iam list-account-aliases | jq -r '."AccountAliases" | join(",")'
	aws sts get-caller-identity | jq .
}

ai-ask () { openai "$*"; }
ai-code () {
	openai "$1. Provide only $2 as output." | bat --color=always --style="plain" --paging=never --language="$3";
}
ai-sh () { ai-code "$*" "shell command" sh; }
ai-js () { ai-code "$*" "javascript code" js; }
ai-ts () { ai-code "$*" "typescript code" ts; }
ai-rs () { ai-code "$*" "rust code" rs; }

openai () {
	local api_key api_key_path=~/.config/openai/api_key.txt response
	local prompt="$1"
	local model="text-davinci-003"
	local max_tokens=2048

	if ! [ -f "${api_key_path}" ]; then
		! [ -d "${api_key_path:h}" ] && mkdir -p "${api_key_path:h}"
		gum input --prompt "API Key: " --placeholder "sk-" > "${api_key_path}"
	fi
	api_key=$(cat "${api_key_path}")

	response=$(gum spin --spinner points --title "Waiting for response" --show-output -- \
		curl -s -X POST https://api.openai.com/v1/completions \
			-H 'Content-Type: application/json' \
			-H "Authorization: Bearer ${api_key}" \
			-d "{ \"prompt\": \"${prompt}\", \"model\": \"${model}\", \"max_tokens\": ${max_tokens} }"
	)
	printf '%s' "${response}" | jq -r '.choices[0].text' | tr -s '\n'
}
